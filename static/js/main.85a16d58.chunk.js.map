{"version":3,"sources":["services/index.tsx","services/RootStoreService/index.tsx","config/index.js","redux/models/TemplateModel/selectors.tsx","components/App/hook.tsx","components/Header/Logo/index.tsx","components/Header/index.tsx","components/Sidebar/SidebarMenuItem/index.tsx","components/Sidebar/index.tsx","components/Content/Desktop/index.tsx","redux/models/RecipesModel/selectors.tsx","components/Content/Recipes/RecipeList/index.tsx","components/Content/Plans/index.tsx","components/App/index.tsx","worker/serviceWorker.js","index.tsx","redux/models/TemplateModel/sagas.tsx","redux/models/RecipesModel/sagas.tsx","redux/rootSaga.tsx","redux/models/RecipesModel/actions.tsx","redux/models/TemplateModel/index.tsx","redux/models/RecipesModel/index.tsx","redux/models/TemplateModel/actions.tsx","redux/models/TemplateModel/reducer.tsx","redux/models/RecipesModel/reducer.tsx","redux/rootReducer.tsx","redux/rootStore.tsx","redux/models/RecipesModel/types.tsx","redux/models/TemplateModel/types.tsx"],"names":["config","window","__config","console","log","warn","__dirname","__filename","path","resolve","require","error","rootStore","RootStoreSingleton","getInstance","store","module","exports","selectIsTemplateWorking","createSelector","state","get","domain","TemplateModelStateFields","IS_TEMPLATE_WORKING","useAppHook","isTemplateWorking","useSelector","dispatch","useDispatch","useEffect","value","setIsTemplateWorking","isLoading","isSuccess","isFailure","Logo","props","className","defaultProps","Header","SidebarMenuItem","to","url","name","Sidebar","Desktop","type","placeholder","selectRecipesDomain","selectIsRecipesFetched","RecipesModelStateFields","IS_FETCHED","selectRecipes","RECIPES","RecipeList","fetchRecipes","success","recipeItems","recipesDataFromSelector","Recipes","map","recipe","key","id","nazwa","skladniki","przepis","Plans","renderLoading","renderSuccessMessage","exact","renderFailureMessage","App","Boolean","location","hostname","match","rootEl","document","getElementById","Component","history","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","TemplateModelSagas","fork","takeEvery","TemplateActions","SET_IS_TEMPLATE_WORKING","payload","delay","put","setIsTemplateWorkingSuccess","Error","recipesFetcher","RecipesModelSagas","takeLatest","RecipesActions","RECIPES_FETCH","apiKey","fetch","recipesResponse","json","tmp","recipesFetchSuccess","recipesFetchFailure","rootSaga","sagas","all","recipes","action","RECIPES_FETCH_SUCCESS","errors","RECIPES_FETCH_FAILURE","SET_IS_TEMPLATE_WORKING_SUCCESS","initialState","fromJS","TemplateModelReducer","set","SET_IS_TEMPLATE_WORKING_FAILURE","RecipesModelReducer","asyncReducers","reducers","TemplateDomain","TemplateReducer","RecipesDomain","router","connectRouter","combineReducers","sagaMiddleware","createSagaMiddleware","createBrowserHistory","default","middlewares","push","routerMiddleware","enhancers","applyMiddleware","composeEnhancers","composeWithDevTools","reducer","rootReducer","createStore","enableBatching","run","END"],"mappings":"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","file":"static/js/main.85a16d58.chunk.js","sourcesContent":["import { ConfigInterface } from './interfaces';\nimport { RootStoreSingleton } from './RootStoreService';\n\nimport path from 'path';\n\nexport let config: ConfigInterface = {};\n\nif (window.__config) {\n  console.log('Taking config from XHR config file');\n  config = window.__config;\n} else {\n  console.warn('Missing \"window\" config object, will try to import dynamically from src/config directory');\n  try {\n    console.log('Importing config from local file \\n\\n');\n    console.log(__dirname, __filename, path.resolve(__filename), path.resolve(__dirname));\n    console.log('\\n\\n');\n\n    config = require('config');\n  } catch (error) {\n    console.error('Cannot import config file');\n  }\n}\n\nexport const rootStore = RootStoreSingleton.getInstance(config);\n\nexport default {\n  config,\n};\n","import rootStore from 'redux/rootStore';\nimport { ConfigInterface } from 'services/interfaces';\n\nexport const RootStoreSingleton = (function () {\n  let store;\n\n  return {\n    getInstance: function (config: ConfigInterface) {\n      if (!store) {\n        store = rootStore({}, config);\n\n        window['__store'] = store;\n      }\n      return store;\n    },\n  };\n})();\n","var config = {\n\n};\n\nwindow.__config = config;\n\nif (typeof module !== 'undefined') {\n    module.exports = config;\n}\n\n","import { domain } from 'redux/models/TemplateModel';\nimport { TemplateModelStateInterface, TemplateModelStateFields } from 'redux/models/TemplateModel/types';\nimport { createSelector } from 'reselect';\nimport { Maybe } from 'types';\n\nexport const selectTemplateDomain = (state) => state.get(domain) as TemplateModelStateInterface;\n\nexport const selectIsTemplateWorking = createSelector(\n  selectTemplateDomain,\n  (domain) => domain.get(TemplateModelStateFields.IS_TEMPLATE_WORKING) as Maybe<boolean>\n);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setIsTemplateWorking } from 'redux/models/TemplateModel/actions';\nimport { selectIsTemplateWorking } from 'redux/models/TemplateModel/selectors';\n\ninterface AppHookInterface {\n  isLoading: boolean;\n  isSuccess: boolean;\n  isFailure: boolean;\n}\n\nexport const useAppHook = (): AppHookInterface => {\n\n  const isTemplateWorking = useSelector(selectIsTemplateWorking);\n\n  const dispatch = useDispatch();\n  const onComponentMount =\n    (value: boolean) => dispatch(setIsTemplateWorking(value));\n\n  useEffect(() => {\n    onComponentMount(true);\n  }, []);\n\n  return {\n    isLoading: isTemplateWorking === null,\n    isSuccess: !!isTemplateWorking,\n    isFailure: !isTemplateWorking && isTemplateWorking !== null\n  };\n};","import React from 'react';\n\nimport './styles.scss';\n\nexport interface LogoInterface {\n  className?: string;\n}\n\nconst defaultProps: LogoInterface = {\n  className: '',\n};\n\nconst Logo: React.FC<LogoInterface> = (props) => {\n  return (\n    <div className={`Logo ${props.className}`}>\n      <span className='Logo-word1'>Zaplanuj</span>\n      <span className='Logo-word2'>Jedzonko</span>\n    </div>\n  );\n};\n\nLogo.defaultProps = defaultProps;\n\nexport default Logo;","import React from 'react';\nimport Logo from './Logo';\n\nimport './styles.scss';\n\nexport interface HeaderInterface {\n  className?: string;\n}\n\nconst defaultProps: HeaderInterface = {\n  className: '',\n};\n\nconst Header: React.FC<HeaderInterface> = (props) => {\n  return (\n    <header className={`Header ${props.className}`}>\n      <Logo />\n    </header>\n  );\n};\n\nHeader.defaultProps = defaultProps;\n\nexport default Header;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './styles.scss';\n\nexport interface SidebarMenuItemInterface {\n  className?: string;\n  url: string;\n  name?: string;\n}\n\nconst defaultProps: SidebarMenuItemInterface = {\n  className: '',\n  url: '/',\n  name: 'UZUPELNIJ NAME PLACEHOLDER',\n};\n\nconst SidebarMenuItem: React.FC<SidebarMenuItemInterface> = (props) => {\n  return (\n    <NavLink to={`/${props.url}`} className={`SidebarMenuItem ${props.className}`}>\n      {props.name}\n    </NavLink>\n  );\n};\n\nSidebarMenuItem.defaultProps = defaultProps;\n\nexport default SidebarMenuItem;","import React from 'react';\nimport {  NavLink, Route } from 'react-router-dom';\nimport SidebarMenuItem from './SidebarMenuItem';\n\nimport './styles.scss';\n\nexport interface SidebarInterface {\n  className?: string;\n  name?: string;\n}\n\nconst defaultProps: SidebarInterface = {\n  className: '',\n  name: '',\n};\n\nconst Sidebar: React.FC<SidebarInterface> = (props) => {\n  return (\n    <nav className={`Sidebar ${props.className}`}>\n      <Route>\n        <SidebarMenuItem name=\"Pulpit\" url=\"desktop\">\n        </SidebarMenuItem>\n        <SidebarMenuItem name=\"Przepisy\" url=\"recipes\">\n        </SidebarMenuItem>\n        {/* <SidebarMenuItem name=\"Kontakt\" url=\"desktop\">\n        </SidebarMenuItem> */}\n      </Route>\n    </nav>\n  );\n};\n\nSidebar.defaultProps = defaultProps;\n\nexport default Sidebar;","import React from 'react';\n\nimport './styles.scss';\n\nexport interface DesktopInterface {\n  className?: string;\n}\n\nconst defaultProps: DesktopInterface = {\n  className: '',\n};\n\nconst Desktop: React.FC<DesktopInterface> = (props) => {\n  return (\n    <main className={`Desktop ${props.className}`}>\n      <h2>NASZ PIEKNY Desktop</h2>\n      <input type=\"text\" placeholder=\"kim ty jestes czlowieku\" />\n      <button type=\"submit\">ZAPISZSZZ</button>\n      <div>\n        (to nie dziala, no problemo)\n      </div>\n    </main>\n  );\n};\n\nDesktop.defaultProps = defaultProps;\n\nexport default Desktop;","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { domain } from 'redux/models/RecipesModel';\nimport { RecipesModelStateInterface, RecipesModelStateFields, RecipesDataInterface } from 'redux/models/RecipesModel/types';\nimport { createSelector } from 'reselect';\nimport { Maybe } from 'types';\n\nexport const selectRecipesDomain = (state) => state.get(domain) as RecipesModelStateInterface;\n\nexport const selectIsRecipesFetched = createSelector(\n  selectRecipesDomain,\n  (domain) => domain.get(RecipesModelStateFields.IS_FETCHED) as Maybe<boolean>\n);\n\nexport const selectRecipes = createSelector(\n  selectRecipesDomain,\n  (domain) => domain.get(RecipesModelStateFields.RECIPES) as Maybe<RecipesDataInterface>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Reducer } from 'redux';\n\nimport { useSelector, useDispatch } from 'react-redux';\n// import { configureStore } from 'redux-immutable';\n// import RecipesModelReducer from 'redux/models/RecipesModel/reducer';\n\nimport { fetchRecipes } from 'redux/models/RecipesModel/actions';\nimport { selectIsRecipesFetched, selectRecipes } from 'redux/models/RecipesModel/selectors';\n\nimport './styles.scss';\nimport { RecipeInterface } from 'redux/models/RecipesModel/types';\n\n\nexport interface RecipeListInterface {\n  className?: string;\n  name?: string;\n}\n\nconst defaultProps: RecipeListInterface = {\n  className: '',\n  name: 'Lista przepisów',\n};\n\nconst fakeApiKey = 'asd';\n\n// const store = configureStore({ reducer: RecipesModelReducer });\n\nconst RecipeList: React.FC<RecipeListInterface> = (props) => {\n\n  const dispatch = useDispatch();\n  const callRecipesFetcher = () => dispatch(fetchRecipes(fakeApiKey));\n\n  useEffect(() => {\n    callRecipesFetcher();\n  }, []);\n\n\n  const success = useSelector(selectIsRecipesFetched);\n  console.log(success);\n\n  const recipesDataFromSelector = useSelector(selectRecipes);\n  console.log(recipesDataFromSelector);\n\n  let recipeItems;\n  if (recipesDataFromSelector) {\n    recipeItems = recipesDataFromSelector.Recipes.map((recipe: RecipeInterface) => {\n      return (\n        <tr key={recipe.id}>\n          <td>{recipe.id}</td>\n          <td>{recipe.nazwa}</td>\n          <td>{recipe.skladniki}</td>\n          <td>{recipe.przepis}</td>\n        </tr>\n      );\n    });\n  } else {\n    recipeItems = null;\n  }\n\n  return (\n    <div className={`RecipeList ${props.className}`}>\n      <div>\n        <h3>{props.name}</h3>\n        <button className=\"add\">+</button>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>NAZWA</th>\n            <th>OPIS</th>\n            <th>AKCJE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {recipeItems}\n          {/* <RecipeListItem /> */}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nRecipeList.defaultProps = defaultProps;\n\nexport default RecipeList;","import React from 'react';\n\nimport './styles.scss';\n\nexport interface PlansInterface {\n  className?: string;\n}\n\nconst defaultProps: PlansInterface = {\n  className: '',\n};\n\nconst Plans: React.FC<PlansInterface> = (props) => {\n  return (\n    <main className={`Plans ${props.className}`}>\n      PLANS\n    </main>\n  );\n};\n\nPlans.defaultProps = defaultProps;\n\nexport default Plans;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { useAppHook } from 'components/App/hook';\n\nimport Header from 'components/Header';\nimport Sidebar from 'components/Sidebar';\n// import Footer from 'components/Footer';\n\nimport Desktop from 'components/Content/Desktop';\nimport Recipes from 'components/Content/Recipes/RecipeList';\nimport Plans from 'components/Content/Plans';\n\nimport './styles.scss';\n\nconst App: React.FC = () => {\n\n  const {\n    isLoading,\n    isSuccess,\n    isFailure\n  } = useAppHook();\n\n  return (\n    <div className=\"App\">\n      {isLoading && renderLoading()}\n      {isSuccess && renderSuccessMessage()}\n      {isFailure && renderFailureMessage()}\n    </div>\n  );\n};\n\nconst renderLoading = () => {\n  return (\n    <span className=\"App__loader\">{'Loading kurde bele...'}</span>\n  );\n};\n\nconst renderSuccessMessage = () => {\n  return (\n    <div className=\"HolyGrail\">\n      <Header />\n      <div className=\"HolyGrail-body\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Desktop />\n          </Route>\n          <Route exact path=\"/desktop\">\n            <Desktop />\n          </Route>\n          <Route exact path=\"/recipes\">\n            <Recipes />\n          </Route>\n          <Route exact path=\"/plans\">\n            <Plans />\n          </Route>\n          {/* <Route exact path=\"/contact\">\n            <Contact />\n          </Route> */}\n        </Switch>\n        <Sidebar />\n      </div>\n      {/* <Footer /> */}\n    </div>\n  );\n};\n\nconst renderFailureMessage = () => {\n  return (\n    <span className=\"App__failure\">{'Cos sie zepsuo'}</span>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { rootStore } from 'services';\n\nimport { Provider as StoreProvider } from 'react-redux';\nimport { history } from 'redux/rootStore';\nimport { ConnectedRouter } from 'connected-react-router/immutable';\n\nimport './index.scss';\n\nimport App from './components/App';\n\nimport * as serviceWorker from './worker/serviceWorker';\nimport * as interfaces from 'services/interfaces';\n\nimport { AnyDict } from 'types';\n\n// declare custom fields in window\ndeclare global {\n  interface Window {\n    __config: interfaces.ConfigInterface;\n    gapi: AnyDict;\n  }\n}\n\nconst rootEl = document.getElementById('root');\n\nfunction Component() {\n  return (\n    <StoreProvider store={rootStore}>\n      <ConnectedRouter history={history}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </ConnectedRouter>\n    </StoreProvider>\n  );\n}\n\nReactDOM.render(\n  <Component />\n  , rootEl);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst HOT_RELOAD = 'hot_reload:';\n\n// Enable react hot reload\nif (module.hot) {\n  module.hot.accept('./components/App', () => {\n    console.log(`${HOT_RELOAD} start`);\n    ReactDOM.render(\n      <Component />,\n      rootEl,\n      () => { console.log(`${HOT_RELOAD} end`); }\n    );\n  });\n}\n\nif (process.env.NODE_ENV === 'development') {\n  console.log('development');\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { put, fork, takeEvery, delay } from 'redux-saga/effects';\n\nimport get from 'lodash/get';\nimport { TemplateActions } from './types';\nimport { PartialPayloadAction } from 'types/reduxTypes';\nimport { setIsTemplateWorkingSuccess } from 'redux/models/TemplateModel/actions';\n\nexport const TemplateModelSagas = [\n  function* () {\n    yield fork(function* () {\n      yield takeEvery(TemplateActions.SET_IS_TEMPLATE_WORKING, setIsTemplateWorking);\n    });\n  }\n];\n\nexport function* setIsTemplateWorking({ payload }: PartialPayloadAction<{value: boolean}>) {\n  try {\n    const value = get(payload, 'value', false);\n\n    if (value) {\n      console.log('SAGA IS ALSO WORKING!');\n\n      yield delay(2000); // wait 2 seconds\n\n      yield put(setIsTemplateWorkingSuccess());\n    } else {\n      throw new Error('Something went terribly wrong :|');\n    }\n  } catch (error) {\n    console.log('Wild error appeared!', error);\n  };\n}","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { put, fork, takeLatest } from 'redux-saga/effects';\n\nimport { RecipesActions, RecipesDataInterface } from './types';\nimport { recipesFetchSuccess, recipesFetchFailure } from 'redux/models/RecipesModel/actions';\nimport { PartialPayloadAction } from 'types/reduxTypes';\nimport { constants } from 'crypto';\nexport const RecipesModelSagas = [\n  function* () {\n    yield fork(function* () {\n      yield takeLatest(RecipesActions.RECIPES_FETCH, recipesFetcher);\n    });\n  }\n];\n\n\nexport function* recipesFetcher({ payload }: PartialPayloadAction<{\n  apiKey: string;\n}>) {\n  try {\n    console.log('loading');\n\n    if (payload) {\n      const { apiKey } = payload;\n\n      if (apiKey) {\n        const recipesResponse: Response = yield fetch('/przepisy.json');\n        const tmp: RecipesDataInterface = yield recipesResponse.json();\n        yield put(recipesFetchSuccess(tmp));\n      } else {\n        throw Error('NO API KEY GIVEN');\n      }\n    } else {\n      throw Error('NO PARAMS?');\n    }\n\n  } catch (error) {\n    console.log(error);\n    yield put(recipesFetchFailure(error));\n  } finally {\n    console.log('receipes tried to fetch');\n  }\n}","import { fork, all } from 'redux-saga/effects';\nimport { ConfigInterface } from 'services/interfaces';\n\nimport { TemplateModelSagas } from 'redux/models/TemplateModel/sagas';\nimport { RecipesModelSagas } from './models/RecipesModel/sagas';\n\nexport default (config: ConfigInterface) => (function* rootSaga() {\n  const sagas = [\n    // ...ModelSagas\n    ...TemplateModelSagas,\n    ...RecipesModelSagas\n  ];\n\n  yield all(sagas.map(fork));\n});\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { RecipesActions, RecipesDataInterface } from 'redux/models/RecipesModel/types';\nimport { action } from 'typesafe-actions';\nimport { AnyDict, Id } from 'types';\nimport { Map } from 'immutable';\n\nexport const recipesFetchSuccess = (\n  recipes: RecipesDataInterface\n) =>\n  action(RecipesActions.RECIPES_FETCH_SUCCESS, { recipes });\n\nexport const recipesFetchFailure = (\n  errors: AnyDict\n) =>\n  action(RecipesActions.RECIPES_FETCH_FAILURE, { errors });\n\nexport const fetchRecipes = (\n  apiKey: string\n) =>\n  action(RecipesActions.RECIPES_FETCH, { apiKey });\n","export const domain = 'TemplateModel';","export const domain = 'RecipesModel';","import { action } from 'typesafe-actions';\nimport { TemplateActions } from 'redux/models/TemplateModel/types';\n\nexport const setIsTemplateWorking = (\n  value: boolean\n) =>\n  action(TemplateActions.SET_IS_TEMPLATE_WORKING, { value });\n\nexport const setIsTemplateWorkingSuccess = () =>\n  action(TemplateActions.SET_IS_TEMPLATE_WORKING_SUCCESS);\n\nexport const setIsTemplateWorkingFailure = () =>\n  action(TemplateActions.SET_IS_TEMPLATE_WORKING_FAILURE);\n","import { fromJS } from 'immutable';\nimport { Reducer } from 'redux';\nimport { TemplateModelStateInterface, TemplateModelStateFields, TemplateActions } from './types';\nimport { PayloadAction } from 'types/reduxTypes';\n\nconst initialState: TemplateModelStateInterface = fromJS({\n  [TemplateModelStateFields.IS_TEMPLATE_WORKING]: null\n});\n\nconst TemplateModelReducer: Reducer<TemplateModelStateInterface, PayloadAction> = (\n  state: TemplateModelStateInterface = initialState, action: PayloadAction\n): TemplateModelStateInterface => {\n\n  switch (action.type) {\n    case TemplateActions.SET_IS_TEMPLATE_WORKING_SUCCESS: {\n      return state\n        .set(TemplateModelStateFields.IS_TEMPLATE_WORKING, true);\n    }\n\n    case TemplateActions.SET_IS_TEMPLATE_WORKING_FAILURE: {\n      return state\n        .set(TemplateModelStateFields.IS_TEMPLATE_WORKING, false);\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default TemplateModelReducer;\n","import { fromJS } from 'immutable';\nimport { Reducer } from 'redux';\nimport { RecipesModelStateInterface, RecipesModelStateFields, RecipesActions } from './types';\nimport { PayloadAction } from 'types/reduxTypes';\n\nimport get from 'lodash/get';\n\nconst initialState: RecipesModelStateInterface = fromJS({\n  [RecipesModelStateFields.IS_FETCHED]: null,\n  [RecipesModelStateFields.RECIPES]: null,\n});\n\nconst RecipesModelReducer: Reducer<RecipesModelStateInterface, PayloadAction> = (\n  state: RecipesModelStateInterface = initialState, action: PayloadAction\n): RecipesModelStateInterface => {\n\n  switch (action.type) {\n    case RecipesActions.RECIPES_FETCH_SUCCESS: {\n\n      const recipes = get(action, ['payload', 'recipes'], []);\n\n      return state\n        .set(RecipesModelStateFields.IS_FETCHED, true)\n        .set(RecipesModelStateFields.RECIPES, recipes);\n    }\n\n    case RecipesActions.RECIPES_FETCH_FAILURE: {\n      return state\n        .set(RecipesModelStateFields.IS_FETCHED, false);\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default RecipesModelReducer;","/**\n * Combine all reducers in this file and export the combined reducers.\n * If we were to do this in store.js, reducers wouldn't be hot reloadable.\n */\n\nimport { combineReducers } from 'redux-immutable';\nimport { connectRouter } from 'connected-react-router/immutable';\n\nimport { domain as TemplateDomain } from 'redux/models/TemplateModel';\nimport TemplateReducer from 'redux/models/TemplateModel/reducer';\n\nimport { domain as RecipesDomain } from 'redux/models/RecipesModel';\nimport RecipesModelReducer from 'redux/models/RecipesModel/reducer';\n\nimport { ConfigInterface } from 'services/interfaces';\n\nexport default function (asyncReducers, history, config: ConfigInterface) {\n  const reducers = {\n    // [ModelDomain]: ModelReducer\n    [TemplateDomain]: TemplateReducer,\n    [RecipesDomain]: RecipesModelReducer,\n\n    ...asyncReducers,\n  };\n\n  reducers.router = connectRouter(history);\n\n  return combineReducers(reducers);\n}\n","import { createStore, applyMiddleware, Middleware, AnyAction, Store } from 'redux';\nimport { enableBatching } from 'redux-batched-actions';\nimport { composeWithDevTools } from 'remote-redux-devtools';\nimport { fromJS } from 'immutable';\nimport { routerMiddleware } from 'connected-react-router/immutable';\nimport { createBrowserHistory, History } from 'history';\nimport createSagaMiddleware, { END } from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport { ConfigInterface } from 'services/interfaces';\n\n// import SagaLogger from 'utils/SagaLogger'\n// import SagaMonitor from 'utils/SagaMonitor'\n\nconst sagaMiddleware = createSagaMiddleware({}); // sagaMonitor: SagaLogger,\n\nexport const history: History = createBrowserHistory();\n\nexport default function (\n  initialState = {},\n  config: ConfigInterface\n): Store<unknown, AnyAction> {\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const rootSaga = require('./rootSaga').default(config);\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  const middlewares: Middleware[] = [sagaMiddleware];\n\n  middlewares.push(routerMiddleware(history));\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  const composeEnhancers = typeof window === 'object' &&\n    window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__']\n    ? window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__']\n    : composeWithDevTools;\n\n  const reducer = rootReducer({}, history, config);\n\n  const store = createStore(\n    enableBatching(reducer),\n    fromJS(initialState),\n    composeEnhancers(...enhancers)\n  );\n\n  store['runSaga'] = sagaMiddleware.run;\n  store['asyncReducers'] = {};\n  store['close'] = () => store.dispatch(END);\n\n  store['runSaga'](rootSaga);\n  // const currentSagas = store.runSaga(rootSaga);\n\n  // TODO HMR for reducers\n  // TODO HMR for sagas\n\n  return store;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Map } from 'immutable';\nimport { Maybe } from 'types';\n\nexport enum RecipesModelStateFields {\n  IS_FETCHED = 'isFetched',\n  RECIPES = 'recipes',\n}\n\nexport interface RecipesModelStateInterface extends Map<string, any> {\n  [RecipesModelStateFields.IS_FETCHED]: Maybe<boolean>;\n  [RecipesModelStateFields.RECIPES]: Maybe<RecipesDataInterface>;\n}\n\nexport enum RecipesActions {\n  RECIPES_FETCH = 'RECIPES',\n  RECIPES_FETCH_SUCCESS = 'RECIPES_SUCCESS',\n  RECIPES_FETCH_FAILURE = 'RECIPES_FAILURE',\n}\n\nexport interface RecipeInterface {\n  id: number;\n  nazwa: string;\n  skladniki: string;\n  przepis: string;\n}\n\nexport interface RecipesDataInterface {\n  Recipes: Array<RecipeInterface>;\n}\n\n","import { Map } from 'immutable';\nimport { Maybe } from 'types';\n\nexport enum TemplateModelStateFields {\n  IS_TEMPLATE_WORKING = 'isTemplateWorking'\n}\n\nexport interface TemplateModelStateInterface extends Map<string, any>  {\n  [TemplateModelStateFields.IS_TEMPLATE_WORKING]: Maybe<boolean>;\n}\n\nexport enum TemplateActions {\n  SET_IS_TEMPLATE_WORKING = 'SET_IS_TEMPLATE_WORKING',\n  SET_IS_TEMPLATE_WORKING_SUCCESS = 'SET_IS_TEMPLATE_WORKING_SUCCESS',\n  SET_IS_TEMPLATE_WORKING_FAILURE = 'SET_IS_TEMPLATE_WORKING_FAILURE',\n}\n"],"sourceRoot":""}